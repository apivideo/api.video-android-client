apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'com.diffplug.spotless'
apply plugin: 'maven-publish'
apply plugin: 'kotlin-android'

group = 'video.api'
version = '1.3.0'

buildscript {
    repositories {
        mavenCentral()
        google()
    }
    dependencies {
        classpath 'com.diffplug.spotless:spotless-plugin-gradle:5.17.1'
        classpath 'com.android.tools.build:gradle:7.4.1'
        classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:1.7.21'
        classpath 'de.mannodermaus.gradle.plugins:android-junit5:1.8.2.1'
    }
}

allprojects {
    repositories {
        mavenCentral()
        google()
    }
}

if(hasProperty('target') && target == 'android') {
    apply plugin: 'com.android.library'
    apply plugin: 'de.mannodermaus.android-junit5'
    apply from: 'maven-push.gradle'

    android {
        compileSdkVersion 33
        buildToolsVersion '30.0.3'
        defaultConfig {
            minSdkVersion 24
            targetSdkVersion 33
            multiDexEnabled true

            testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
            testInstrumentationRunnerArgument("runnerBuilder", "de.mannodermaus.junit5.AndroidJUnit5Builder")
            testInstrumentationRunnerArgument("environmentVariables", "INTEGRATION_TESTS_API_KEY=${System.getenv("INTEGRATION_TESTS_API_KEY")}")
        }

        compileOptions {
            sourceCompatibility JavaVersion.VERSION_1_8
            targetCompatibility JavaVersion.VERSION_1_8
        }
    }

} else {
    apply plugin: 'java'

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    publishing {
        publications {
            maven(MavenPublication) {
                artifactId = 'android-api-client'
                from components.java
            }
        }
    }

    task execute(type:JavaExec) {
        main = System.getProperty('mainClass')
        classpath = sourceSets.main.runtimeClasspath
    }

    javadoc {
        options.tags = [ "http.response.details:a:Http Response Details" ]
    }

    sourceSets {
        main.java.srcDirs = ['src/main/java']
    }
}

dependencies {
    implementation 'io.swagger:swagger-annotations:1.5.24'
    implementation "com.google.code.findbugs:jsr305:3.0.2"
    api 'com.squareup.okhttp3:okhttp:4.10.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.10.0'
    implementation 'com.google.code.gson:gson:2.8.9'
    implementation 'io.gsonfire:gson-fire:1.8.4'
    implementation 'org.openapitools:jackson-databind-nullable:0.2.1'
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.10'
    implementation 'org.threeten:threetenbp:1.5.2'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.7.21"
    implementation 'androidx.core:core-ktx:1.9.0'
    implementation 'androidx.work:work-runtime-ktx:2.8.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.8.0'
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.mockito:mockito-core:3.12.4'
    testImplementation 'org.assertj:assertj-core:3.19.0'
    testImplementation "com.google.truth:truth:1.1.3"
    androidTestImplementation "com.google.truth:truth:1.1.3"
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'

    androidTestImplementation 'androidx.test:rules:1.5.0'
    androidTestImplementation 'androidx.test:core:1.5.0'
    androidTestImplementation 'androidx.test:runner:1.5.2'
    androidTestImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    androidTestImplementation 'de.mannodermaus.junit5:android-test-core:1.3.0'
    androidTestRuntimeOnly 'de.mannodermaus.junit5:android-test-runner:1.3.0'
}

// Use spotless plugin to automatically format code, remove unused import, etc
// To apply changes directly to the file, run `gradlew spotlessApply`
// Ref: https://github.com/diffplug/spotless/tree/main/plugin-gradle
spotless {
    // comment out below to run spotless as part of the `check` task
    enforceCheck false

    format 'misc', {
        // define the files (e.g. '*.gradle', '*.md') to apply `misc` to
        target '.gitignore'

        // define the steps to apply to those files
        trimTrailingWhitespace()
        indentWithSpaces() // Takes an integer argument if you don't like 4
        endWithNewline()
    }
    java {
        // don't need to set target, it is inferred from java

        // apply a specific flavor of google-java-format
        googleJavaFormat('1.8').aosp().reflowLongStrings()

        removeUnusedImports()
        importOrder()
    }
}
